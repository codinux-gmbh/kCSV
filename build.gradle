buildscript {
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id("io.kotest.multiplatform") version "$kotestVersion"
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
//    id 'com.github.spotbugs' version '4.5.0'
    id 'info.solidsoft.pitest' version '1.5.2'
}


group = "net.codinux.csv"
version = "2.2.0"


repositories {
    mavenCentral()
}

sourceSets {
    example
}


kotlin {
    jvmToolchain(8)

    compilerOptions {
        // suppresses compiler warning: [EXPECT_ACTUAL_CLASSIFIERS_ARE_IN_BETA_WARNING] 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta.
        freeCompilerArgs.add("-Xexpect-actual-classes")
    }

    jvm {
        withJava() // not allowed if android { } is present

        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
//            finalizedBy jacocoTestReport

            testLogging {     // This is for logging and can be removed.
                events("passed", "skipped", "failed")
            }
        }
    }

    js(IR) {
        moduleName = "kCSV"
        binaries.executable()

        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    useFirefoxHeadless()
                }
            }
        }

        nodejs {
            testTask {
                useMocha {
                    timeout = "20s" // Mocha times out after 2 s, which is too short for bufferExceeded() test
                }
            }
        }
    }

    wasmJs()


    linuxX64()
    mingwX64()

    iosX64()
    iosArm64()
    iosSimulatorArm64()
    macosX64()
    macosArm64()
    watchosArm64()
    watchosSimulatorArm64()
    tvosArm64()
    tvosSimulatorArm64()

    applyDefaultHierarchyTemplate()


    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin("reflect")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin("test")

                implementation("io.kotest:kotest-framework-engine:$kotestVersion")
                implementation("io.kotest:kotest-assertions-core:$kotestVersion")
            }
        }


        jvmMain.dependencies {

//            exampleImplementation sourceSets.jvmMain.output
        }

        jvmTest.dependencies {
            implementation('org.junit.jupiter:junit-jupiter')

            implementation("io.kotest:kotest-runner-junit5:$kotestVersion")

            implementation "org.assertj:assertj-core:$assertJVersion"

            implementation("org.slf4j:slf4j-simple:1.7.30")

//            pitest 'org.pitest:pitest-junit5-plugin:0.12'
        }

        jsMain.dependencies {

        }

//        androidMain {
//            dependsOn jvmMain
//        }

        iosMain.dependencies {

        }

        nativeMain.dependencies {

        }
    }
}

//tasks.withType(JavaCompile) {
//    options.encoding = 'UTF-8'
//}

//tasks.matching { task -> task.name.startsWith('spotbugs') }.forEach {
//    it.reports {
//        html.enabled = true
//        xml.enabled = false
//    }
//}
//
//pitest {
//    testPlugin = 'junit5'
//    targetClasses = ['blackbox.*', 'de.siegmar.*']
//    timestampedReports = false
//}
//
//pmd {
//    consoleOutput = true
//    ruleSets = []
//    ruleSetFiles = files("config/pmd/config.xml")
//}
//
//jacocoTestReport {
//    reports {
//        xml.enabled true
//    }
//}
//
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 1.0
//            }
//        }
//    }
//}
//
//check.dependsOn jacocoTestCoverageVerification
//
//task proguardCheck(type: proguard.gradle.ProGuardTask, dependsOn: jar) {
//    injars project.jar.archivePath
//    libraryjars files(String.format("%s/platforms/android-%s/android.jar",
//            System.getenv("ANDROID_HOME"), System.getenv("API_LEVEL")))
//    libraryjars files(configurations.implementation)
//    // Don't really try to do anything, we just want this tool for it's bytecode lint
//    dontshrink
//    dontobfuscate
//    dontoptimize
//    // Don't fail if LambdaMetafactory is missing - it would be handled by Retrolambda / Jack
//    dontwarn 'java.lang.invoke.LambdaMetafactory'
//}


ext["customArtifactId"] = "kcsv"
ext["projectDescription"] = "Port of FastCSV, an ultra fast and simple RFC 4180 compliant CSV library, for Kotlin Multiplatform"
ext["sourceCodeRepositoryBaseUrl"] = "github.com/codinux-gmbh/kCSV"
ext["licenseName"] = "MIT License"
ext["licenseUrl"] = "https://mit-license.org/"

apply(from: new File("./gradle/scripts/publish-codinux.gradle.kts"))
